# export LeggedRobotCfg and LeggedRobotCfgPPO to a yaml file for cpp
# python src/legged_rl/legged_gym/legged_gym/scripts/export_config.py --target_dir=src/legged_rl/legged_rl_controller/config/

import isaacgym
from legged_gym.envs import *
from legged_gym.utils import task_registry
import yaml
from legged_gym.envs.base.legged_robot_config import LeggedRobotCfg, LeggedRobotCfgPPO
from legged_gym import LEGGED_GYM_ROOT_DIR

import argparse
import os

parser = argparse.ArgumentParser()
parser.add_argument('--task', type=str, default='go2')
parser.add_argument('--target_dir', type=str, required=True)

args = parser.parse_args()
task_name = args.task
target_dir = args.target_dir

# check if target_dir exists
if not os.path.exists(target_dir):
    raise ValueError(f"target_dir {target_dir} does not exist")

env_cfg, train_cfg = task_registry.get_cfgs(name=task_name)
env_cfg : LeggedRobotCfg
train_cfg : LeggedRobotCfgPPO

jit_script_path = os.path.join(LEGGED_GYM_ROOT_DIR, 'logs', train_cfg.runner.experiment_name, 'exported', 'policies')
jit_script_path = os.path.join(jit_script_path, 'policy_1.pt')

# export some necessary info in cfgs to a yaml file
yaml_file_name = 'rl_cfg.yaml'
yaml_file_path = os.path.join(target_dir, yaml_file_name)

with open(yaml_file_path, 'w') as f:
    save_dict = {
        'env': {
            'num_actions': env_cfg.env.num_actions,
            'num_observations': env_cfg.env.num_observations
        },
        'init_state': {
            'default_joint_angles': env_cfg.init_state.default_joint_angles,
        },
        'control': {
            'control_type': env_cfg.control.control_type,
            'action_scale': env_cfg.control.action_scale,
            'stiffness': env_cfg.control.stiffness,
            'damping': env_cfg.control.damping,
        },
        'normalization' : {
            'obs_scales': {
                'lin_vel': env_cfg.normalization.obs_scales.lin_vel,
                'ang_vel': env_cfg.normalization.obs_scales.ang_vel,
                'dof_pos': env_cfg.normalization.obs_scales.dof_pos,
                'dof_vel': env_cfg.normalization.obs_scales.dof_vel,
                'height_measurements': env_cfg.normalization.obs_scales.height_measurements,
            },
            'clip_observations' : env_cfg.normalization.clip_observations,
            'clip_actions' : env_cfg.normalization.clip_actions,
        },
        'jit_script_path': jit_script_path,
    }
    # add a comment in the first line of yaml file
    f.write("# This file is generated by export_config.py\n")
    f.write("# It is not recommended to modify this file manually\n")
    yaml.dump(save_dict, f)


    